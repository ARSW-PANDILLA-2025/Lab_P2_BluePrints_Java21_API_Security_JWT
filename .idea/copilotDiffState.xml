<?xml version="1.0" encoding="UTF-8"?>
<project version="4">
  <component name="CopilotDiffPersistence">
    <option name="pendingDiffs">
      <map>
        <entry key="$PROJECT_DIR$/src/main/java/co/edu/eci/blueprints/api/BlueprintController.java">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/src/main/java/co/edu/eci/blueprints/api/BlueprintController.java" />
              <option name="originalContent" value="package co.edu.eci.blueprints.api;&#10;&#10;import org.springframework.http.HttpStatus;&#10;import org.springframework.http.ResponseEntity;&#10;import org.springframework.security.access.prepost.PreAuthorize;&#10;import org.springframework.web.bind.annotation.*;&#10;import io.swagger.v3.oas.annotations.Operation;&#10;import io.swagger.v3.oas.annotations.Parameter;&#10;import io.swagger.v3.oas.annotations.security.SecurityRequirement;&#10;import io.swagger.v3.oas.annotations.tags.Tag;&#10;&#10;import java.util.List;&#10;import java.util.Map;&#10;import java.util.concurrent.ConcurrentHashMap;&#10;&#10;@RestController&#10;@RequestMapping(&quot;/api/blueprints&quot;)&#10;@Tag(name = &quot;Blueprints&quot;, description = &quot;API for managing blueprints with JWT security&quot;)&#10;@SecurityRequirement(name = &quot;bearerAuth&quot;)&#10;public class BlueprintController {&#10;&#10;    private final Map&lt;String, Map&lt;String, String&gt;&gt; blueprintStorage = new ConcurrentHashMap&lt;&gt;();&#10;@SecurityRequirement(name = &quot;bearerAuth&quot;)&#10;    public BlueprintController() {&#10;        blueprintStorage.put(&quot;student_b1&quot;, Map.of(&#10;                &quot;id&quot;, &quot;b1&quot;,&#10;                &quot;name&quot;, &quot;Casa de campo&quot;,&#10;                &quot;author&quot;, &quot;student&quot;,&#10;                &quot;points&quot;, &quot;[(0,0), (10,10), (20,0)]&quot;));&#10;        blueprintStorage.put(&quot;student_b2&quot;, Map.of(&#10;                &quot;id&quot;, &quot;b2&quot;,&#10;                &quot;name&quot;, &quot;Edificio urbano&quot;,&#10;                &quot;author&quot;, &quot;student&quot;,&#10;                &quot;points&quot;, &quot;[(0,0), (5,15), (10,0), (15,10)]&quot;));&#10;    }&#10;&#10;    @GetMapping&#10;    @PreAuthorize(&quot;hasAuthority('SCOPE_blueprints.read')&quot;)&#10;    @Operation(summary = &quot;Get all blueprints&quot;, description = &quot;Retrieves all blueprints (requires blueprints.read scope)&quot;)&#10;    public ResponseEntity&lt;List&lt;Map&lt;String, String&gt;&gt;&gt; list() {&#10;        List&lt;Map&lt;String, String&gt;&gt; blueprints = blueprintStorage.values()&#10;                .stream()&#10;                .toList();&#10;        return ResponseEntity.ok(blueprints);&#10;    }&#10;&#10;    @GetMapping(&quot;/{author}&quot;)&#10;    @PreAuthorize(&quot;hasAuthority('SCOPE_blueprints.read')&quot;)&#10;    @Operation(summary = &quot;Get blueprints by author&quot;, description = &quot;Retrieves all blueprints by a specific author (requires blueprints.read scope)&quot;)&#10;    public ResponseEntity&lt;List&lt;Map&lt;String, String&gt;&gt;&gt; getByAuthor(&#10;            @Parameter(description = &quot;Author name&quot;) @PathVariable String author) {&#10;        List&lt;Map&lt;String, String&gt;&gt; authorBlueprints = blueprintStorage.values()&#10;                .stream()&#10;                .filter(bp -&gt; author.equals(bp.get(&quot;author&quot;)))&#10;                .toList();&#10;&#10;        if (authorBlueprints.isEmpty()) {&#10;            return ResponseEntity.notFound().build();&#10;        }&#10;        return ResponseEntity.ok(authorBlueprints);&#10;    }&#10;&#10;    @GetMapping(&quot;/{author}/{name}&quot;)&#10;    @PreAuthorize(&quot;hasAuthority('SCOPE_blueprints.read')&quot;)&#10;    @Operation(summary = &quot;Get specific blueprint&quot;, description = &quot;Retrieves a specific blueprint by author and name (requires blueprints.read scope)&quot;)&#10;    public ResponseEntity&lt;Map&lt;String, String&gt;&gt; getByAuthorAndName(&#10;            @Parameter(description = &quot;Author name&quot;) @PathVariable String author,&#10;            @Parameter(description = &quot;Blueprint name&quot;) @PathVariable String name) {&#10;        String key = author + &quot;_&quot; + name.replace(&quot; &quot;, &quot;&quot;);&#10;        Map&lt;String, String&gt; blueprint = blueprintStorage.get(key);&#10;&#10;        if (blueprint == null) {&#10;            return ResponseEntity.notFound().build();&#10;        }&#10;        return ResponseEntity.ok(blueprint);&#10;    }&#10;&#10;    @PostMapping&#10;    @PreAuthorize(&quot;hasAuthority('SCOPE_blueprints.write')&quot;)&#10;    @Operation(summary = &quot;Create new blueprint&quot;, description = &quot;Creates a new blueprint (requires blueprints.write scope)&quot;)&#10;    public ResponseEntity&lt;Map&lt;String, String&gt;&gt; create(@RequestBody Map&lt;String, String&gt; blueprintData) {&#10;        String name = blueprintData.getOrDefault(&quot;name&quot;, &quot;nuevo&quot;);&#10;        String author = blueprintData.getOrDefault(&quot;author&quot;, &quot;unknown&quot;);&#10;        String points = blueprintData.getOrDefault(&quot;points&quot;, &quot;[]&quot;);&#10;&#10;        String id = &quot;bp_&quot; + System.currentTimeMillis();&#10;        String key = author + &quot;_&quot; + name.replace(&quot; &quot;, &quot;&quot;);&#10;&#10;        Map&lt;String, String&gt; newBlueprint = Map.of(&#10;                &quot;id&quot;, id,&#10;                &quot;name&quot;, name,&#10;                &quot;author&quot;, author,&#10;                &quot;points&quot;, points);&#10;&#10;        blueprintStorage.put(key, newBlueprint);&#10;        return ResponseEntity.status(HttpStatus.CREATED).body(newBlueprint);&#10;    }&#10;&#10;    @PutMapping(&quot;/{author}/{name}/points&quot;)&#10;    @PreAuthorize(&quot;hasAuthority('SCOPE_blueprints.write')&quot;)&#10;    @Operation(summary = &quot;Add point to blueprint&quot;, description = &quot;Adds a point to an existing blueprint (requires blueprints.write scope)&quot;)&#10;    public ResponseEntity&lt;Map&lt;String, String&gt;&gt; addPoint(&#10;            @Parameter(description = &quot;Author name&quot;) @PathVariable String author,&#10;            @Parameter(description = &quot;Blueprint name&quot;) @PathVariable String name,&#10;            @RequestBody Map&lt;String, Object&gt; pointData) {&#10;&#10;        String key = author + &quot;_&quot; + name.replace(&quot; &quot;, &quot;&quot;);&#10;        Map&lt;String, String&gt; blueprint = blueprintStorage.get(key);&#10;&#10;        if (blueprint == null) {&#10;            return ResponseEntity.notFound().build();&#10;        }&#10;&#10;        String currentPoints = blueprint.get(&quot;points&quot;);&#10;        String newPoint = String.format(&quot;(%s,%s)&quot;,&#10;                pointData.get(&quot;x&quot;), pointData.get(&quot;y&quot;));&#10;&#10;        Map&lt;String, String&gt; updatedBlueprint = new ConcurrentHashMap&lt;&gt;(blueprint);&#10;        updatedBlueprint.put(&quot;points&quot;, currentPoints + &quot;, &quot; + newPoint);&#10;        blueprintStorage.put(key, updatedBlueprint);&#10;&#10;        return ResponseEntity.accepted().body(Map.of(&#10;                &quot;message&quot;, &quot;Point added successfully&quot;,&#10;                &quot;point&quot;, newPoint));&#10;    }&#10;&#10;    @DeleteMapping(&quot;/{author}/{name}&quot;)&#10;    @PreAuthorize(&quot;hasAuthority('SCOPE_blueprints.write')&quot;)&#10;    @Operation(summary = &quot;Delete blueprint&quot;, description = &quot;Deletes a specific blueprint (requires blueprints.write scope)&quot;)&#10;    public ResponseEntity&lt;Map&lt;String, String&gt;&gt; delete(&#10;            @Parameter(description = &quot;Author name&quot;) @PathVariable String author,&#10;            @Parameter(description = &quot;Blueprint name&quot;) @PathVariable String name) {&#10;&#10;        String key = author + &quot;_&quot; + name.replace(&quot; &quot;, &quot;&quot;);&#10;        Map&lt;String, String&gt; removed = blueprintStorage.remove(key);&#10;&#10;        if (removed == null) {&#10;            return ResponseEntity.notFound().build();&#10;        }&#10;&#10;        return ResponseEntity.ok(Map.of(&quot;message&quot;, &quot;Blueprint deleted successfully&quot;));&#10;    }&#10;}&#10;" />
              <option name="updatedContent" value="package co.edu.eci.blueprints.api;&#10;&#10;import org.springframework.http.HttpStatus;&#10;import org.springframework.http.ResponseEntity;&#10;import org.springframework.security.access.prepost.PreAuthorize;&#10;import org.springframework.web.bind.annotation.*;&#10;import io.swagger.v3.oas.annotations.Operation;&#10;import io.swagger.v3.oas.annotations.Parameter;&#10;import io.swagger.v3.oas.annotations.media.Content;&#10;import io.swagger.v3.oas.annotations.media.Schema;&#10;import io.swagger.v3.oas.annotations.responses.ApiResponse;&#10;import io.swagger.v3.oas.annotations.responses.ApiResponses;&#10;import io.swagger.v3.oas.annotations.security.SecurityRequirement;&#10;import io.swagger.v3.oas.annotations.tags.Tag;&#10;&#10;import java.util.List;&#10;import java.util.Map;&#10;import java.util.concurrent.ConcurrentHashMap;&#10;&#10;@RestController&#10;@RequestMapping(&quot;/api/blueprints&quot;)&#10;@Tag(name = &quot;Blueprints&quot;, description = &quot;API for managing blueprints with JWT security. Requires authentication with valid JWT token containing appropriate scopes.&quot;)&#10;@SecurityRequirement(name = &quot;bearer-jwt&quot;)&#10;public class BlueprintController {&#10;&#10;    private final Map&lt;String, Map&lt;String, String&gt;&gt; blueprintStorage = new ConcurrentHashMap&lt;&gt;();&#10;&#10;    public BlueprintController() {&#10;        blueprintStorage.put(&quot;student_b1&quot;, Map.of(&#10;                &quot;id&quot;, &quot;b1&quot;,&#10;                &quot;name&quot;, &quot;Casa de campo&quot;,&#10;                &quot;author&quot;, &quot;student&quot;,&#10;                &quot;points&quot;, &quot;[(0,0), (10,10), (20,0)]&quot;));&#10;        blueprintStorage.put(&quot;student_b2&quot;, Map.of(&#10;                &quot;id&quot;, &quot;b2&quot;,&#10;                &quot;name&quot;, &quot;Edificio urbano&quot;,&#10;                &quot;author&quot;, &quot;student&quot;,&#10;                &quot;points&quot;, &quot;[(0,0), (5,15), (10,0), (15,10)]&quot;));&#10;    }&#10;&#10;    @GetMapping&#10;    @PreAuthorize(&quot;hasAuthority('SCOPE_blueprints.read')&quot;)&#10;    @Operation(&#10;        summary = &quot;Get all blueprints&quot;,&#10;        description = &quot;Retrieves all blueprints available in the system. Requires 'blueprints.read' scope in JWT token.&quot;&#10;    )&#10;    @ApiResponses({&#10;        @ApiResponse(&#10;            responseCode = &quot;200&quot;, &#10;            description = &quot;List of blueprints returned successfully&quot;,&#10;            content = @Content(&#10;                mediaType = &quot;application/json&quot;,&#10;                schema = @Schema(example = &quot;[{\&quot;id\&quot;:\&quot;b1\&quot;,\&quot;name\&quot;:\&quot;Casa de campo\&quot;,\&quot;author\&quot;:\&quot;student\&quot;,\&quot;points\&quot;:\&quot;[(0,0), (10,10), (20,0)]\&quot;}]&quot;)&#10;            )&#10;        ),&#10;        @ApiResponse(responseCode = &quot;401&quot;, description = &quot;Unauthorized - Invalid or missing JWT token&quot;, content = @Content),&#10;        @ApiResponse(responseCode = &quot;403&quot;, description = &quot;Forbidden - Missing 'blueprints.read' scope&quot;, content = @Content)&#10;    })&#10;    public ResponseEntity&lt;List&lt;Map&lt;String, String&gt;&gt;&gt; list() {&#10;        List&lt;Map&lt;String, String&gt;&gt; blueprints = blueprintStorage.values()&#10;                .stream()&#10;                .toList();&#10;        return ResponseEntity.ok(blueprints);&#10;    }&#10;&#10;    @GetMapping(&quot;/{author}&quot;)&#10;    @PreAuthorize(&quot;hasAuthority('SCOPE_blueprints.read')&quot;)&#10;    @Operation(&#10;        summary = &quot;Get blueprints by author&quot;,&#10;        description = &quot;Retrieves all blueprints created by a specific author. Requires 'blueprints.read' scope in JWT token.&quot;&#10;    )&#10;    @ApiResponses({&#10;        @ApiResponse(&#10;            responseCode = &quot;200&quot;, &#10;            description = &quot;List of blueprints by author returned successfully&quot;,&#10;            content = @Content(mediaType = &quot;application/json&quot;)&#10;        ),&#10;        @ApiResponse(responseCode = &quot;404&quot;, description = &quot;No blueprints found for the specified author&quot;, content = @Content),&#10;        @ApiResponse(responseCode = &quot;401&quot;, description = &quot;Unauthorized - Invalid or missing JWT token&quot;, content = @Content),&#10;        @ApiResponse(responseCode = &quot;403&quot;, description = &quot;Forbidden - Missing 'blueprints.read' scope&quot;, content = @Content)&#10;    })&#10;    public ResponseEntity&lt;List&lt;Map&lt;String, String&gt;&gt;&gt; getByAuthor(&#10;            @Parameter(description = &quot;Author name&quot;, example = &quot;student&quot;, required = true) &#10;            @PathVariable String author) {&#10;        List&lt;Map&lt;String, String&gt;&gt; authorBlueprints = blueprintStorage.values()&#10;                .stream()&#10;                .filter(bp -&gt; author.equals(bp.get(&quot;author&quot;)))&#10;                .toList();&#10;&#10;        if (authorBlueprints.isEmpty()) {&#10;            return ResponseEntity.notFound().build();&#10;        }&#10;        return ResponseEntity.ok(authorBlueprints);&#10;    }&#10;&#10;    @GetMapping(&quot;/{author}/{name}&quot;)&#10;    @PreAuthorize(&quot;hasAuthority('SCOPE_blueprints.read')&quot;)&#10;    @Operation(&#10;        summary = &quot;Get specific blueprint&quot;,&#10;        description = &quot;Retrieves a specific blueprint by author and name. Requires 'blueprints.read' scope in JWT token.&quot;&#10;    )&#10;    @ApiResponses({&#10;        @ApiResponse(&#10;            responseCode = &quot;200&quot;, &#10;            description = &quot;Blueprint found and returned successfully&quot;,&#10;            content = @Content(&#10;                mediaType = &quot;application/json&quot;,&#10;                schema = @Schema(example = &quot;{\&quot;id\&quot;:\&quot;b1\&quot;,\&quot;name\&quot;:\&quot;Casa de campo\&quot;,\&quot;author\&quot;:\&quot;student\&quot;,\&quot;points\&quot;:\&quot;[(0,0), (10,10), (20,0)]\&quot;}&quot;)&#10;            )&#10;        ),&#10;        @ApiResponse(responseCode = &quot;404&quot;, description = &quot;Blueprint not found&quot;, content = @Content),&#10;        @ApiResponse(responseCode = &quot;401&quot;, description = &quot;Unauthorized - Invalid or missing JWT token&quot;, content = @Content),&#10;        @ApiResponse(responseCode = &quot;403&quot;, description = &quot;Forbidden - Missing 'blueprints.read' scope&quot;, content = @Content)&#10;    })&#10;    public ResponseEntity&lt;Map&lt;String, String&gt;&gt; getByAuthorAndName(&#10;            @Parameter(description = &quot;Author name&quot;, example = &quot;student&quot;, required = true) &#10;            @PathVariable String author,&#10;            @Parameter(description = &quot;Blueprint name (spaces will be removed)&quot;, example = &quot;Casa de campo&quot;, required = true) &#10;            @PathVariable String name) {&#10;        String key = author + &quot;_&quot; + name.replace(&quot; &quot;, &quot;&quot;);&#10;        Map&lt;String, String&gt; blueprint = blueprintStorage.get(key);&#10;&#10;        if (blueprint == null) {&#10;            return ResponseEntity.notFound().build();&#10;        }&#10;        return ResponseEntity.ok(blueprint);&#10;    }&#10;&#10;    @PostMapping&#10;    @PreAuthorize(&quot;hasAuthority('SCOPE_blueprints.write')&quot;)&#10;    @Operation(&#10;        summary = &quot;Create new blueprint&quot;,&#10;        description = &quot;Creates a new blueprint in the system. Requires 'blueprints.write' scope in JWT token.&quot;&#10;    )&#10;    @ApiResponses({&#10;        @ApiResponse(&#10;            responseCode = &quot;201&quot;, &#10;            description = &quot;Blueprint created successfully&quot;,&#10;            content = @Content(&#10;                mediaType = &quot;application/json&quot;,&#10;                schema = @Schema(example = &quot;{\&quot;id\&quot;:\&quot;bp_1695177600000\&quot;,\&quot;name\&quot;:\&quot;Mi Plano\&quot;,\&quot;author\&quot;:\&quot;student\&quot;,\&quot;points\&quot;:\&quot;[]\&quot;}&quot;)&#10;            )&#10;        ),&#10;        @ApiResponse(responseCode = &quot;401&quot;, description = &quot;Unauthorized - Invalid or missing JWT token&quot;, content = @Content),&#10;        @ApiResponse(responseCode = &quot;403&quot;, description = &quot;Forbidden - Missing 'blueprints.write' scope&quot;, content = @Content)&#10;    })&#10;    public ResponseEntity&lt;Map&lt;String, String&gt;&gt; create(&#10;        @io.swagger.v3.oas.annotations.parameters.RequestBody(&#10;            description = &quot;Blueprint data to create&quot;,&#10;            required = true,&#10;            content = @Content(&#10;                schema = @Schema(&#10;                    example = &quot;{\&quot;name\&quot;:\&quot;Mi Plano\&quot;,\&quot;author\&quot;:\&quot;student\&quot;,\&quot;points\&quot;:\&quot;[(0,0), (5,5)]\&quot;}&quot;&#10;                )&#10;            )&#10;        )&#10;        @RequestBody Map&lt;String, String&gt; blueprintData) {&#10;        &#10;        String name = blueprintData.getOrDefault(&quot;name&quot;, &quot;nuevo&quot;);&#10;        String author = blueprintData.getOrDefault(&quot;author&quot;, &quot;unknown&quot;);&#10;        String points = blueprintData.getOrDefault(&quot;points&quot;, &quot;[]&quot;);&#10;&#10;        String id = &quot;bp_&quot; + System.currentTimeMillis();&#10;        String key = author + &quot;_&quot; + name.replace(&quot; &quot;, &quot;&quot;);&#10;&#10;        Map&lt;String, String&gt; newBlueprint = Map.of(&#10;                &quot;id&quot;, id,&#10;                &quot;name&quot;, name,&#10;                &quot;author&quot;, author,&#10;                &quot;points&quot;, points);&#10;&#10;        blueprintStorage.put(key, newBlueprint);&#10;        return ResponseEntity.status(HttpStatus.CREATED).body(newBlueprint);&#10;    }&#10;&#10;    @PutMapping(&quot;/{author}/{name}/points&quot;)&#10;    @PreAuthorize(&quot;hasAuthority('SCOPE_blueprints.write')&quot;)&#10;    @Operation(&#10;        summary = &quot;Add point to blueprint&quot;,&#10;        description = &quot;Adds a new point to an existing blueprint. Requires 'blueprints.write' scope in JWT token.&quot;&#10;    )&#10;    @ApiResponses({&#10;        @ApiResponse(&#10;            responseCode = &quot;202&quot;, &#10;            description = &quot;Point added successfully to blueprint&quot;,&#10;            content = @Content(&#10;                mediaType = &quot;application/json&quot;,&#10;                schema = @Schema(example = &quot;{\&quot;message\&quot;:\&quot;Point added successfully\&quot;,\&quot;point\&quot;:\&quot;(10,20)\&quot;}&quot;)&#10;            )&#10;        ),&#10;        @ApiResponse(responseCode = &quot;404&quot;, description = &quot;Blueprint not found&quot;, content = @Content),&#10;        @ApiResponse(responseCode = &quot;401&quot;, description = &quot;Unauthorized - Invalid or missing JWT token&quot;, content = @Content),&#10;        @ApiResponse(responseCode = &quot;403&quot;, description = &quot;Forbidden - Missing 'blueprints.write' scope&quot;, content = @Content)&#10;    })&#10;    public ResponseEntity&lt;Map&lt;String, String&gt;&gt; addPoint(&#10;            @Parameter(description = &quot;Author name&quot;, example = &quot;student&quot;, required = true) &#10;            @PathVariable String author,&#10;            @Parameter(description = &quot;Blueprint name&quot;, example = &quot;Casa de campo&quot;, required = true) &#10;            @PathVariable String name,&#10;            @io.swagger.v3.oas.annotations.parameters.RequestBody(&#10;                description = &quot;Point coordinates to add&quot;,&#10;                required = true,&#10;                content = @Content(&#10;                    schema = @Schema(example = &quot;{\&quot;x\&quot;:10,\&quot;y\&quot;:20}&quot;)&#10;                )&#10;            )&#10;            @RequestBody Map&lt;String, Object&gt; pointData) {&#10;&#10;        String key = author + &quot;_&quot; + name.replace(&quot; &quot;, &quot;&quot;);&#10;        Map&lt;String, String&gt; blueprint = blueprintStorage.get(key);&#10;&#10;        if (blueprint == null) {&#10;            return ResponseEntity.notFound().build();&#10;        }&#10;&#10;        String currentPoints = blueprint.get(&quot;points&quot;);&#10;        String newPoint = String.format(&quot;(%s,%s)&quot;,&#10;                pointData.get(&quot;x&quot;), pointData.get(&quot;y&quot;));&#10;&#10;        Map&lt;String, String&gt; updatedBlueprint = new ConcurrentHashMap&lt;&gt;(blueprint);&#10;        updatedBlueprint.put(&quot;points&quot;, currentPoints + &quot;, &quot; + newPoint);&#10;        blueprintStorage.put(key, updatedBlueprint);&#10;&#10;        return ResponseEntity.accepted().body(Map.of(&#10;                &quot;message&quot;, &quot;Point added successfully&quot;,&#10;                &quot;point&quot;, newPoint));&#10;    }&#10;&#10;    @DeleteMapping(&quot;/{author}/{name}&quot;)&#10;    @PreAuthorize(&quot;hasAuthority('SCOPE_blueprints.write')&quot;)&#10;    @Operation(&#10;        summary = &quot;Delete blueprint&quot;,&#10;        description = &quot;Deletes a specific blueprint from the system. Requires 'blueprints.write' scope in JWT token.&quot;&#10;    )&#10;    @ApiResponses({&#10;        @ApiResponse(&#10;            responseCode = &quot;200&quot;, &#10;            description = &quot;Blueprint deleted successfully&quot;,&#10;            content = @Content(&#10;                mediaType = &quot;application/json&quot;,&#10;                schema = @Schema(example = &quot;{\&quot;message\&quot;:\&quot;Blueprint deleted successfully\&quot;}&quot;)&#10;            )&#10;        ),&#10;        @ApiResponse(responseCode = &quot;404&quot;, description = &quot;Blueprint not found&quot;, content = @Content),&#10;        @ApiResponse(responseCode = &quot;401&quot;, description = &quot;Unauthorized - Invalid or missing JWT token&quot;, content = @Content),&#10;        @ApiResponse(responseCode = &quot;403&quot;, description = &quot;Forbidden - Missing 'blueprints.write' scope&quot;, content = @Content)&#10;    })&#10;    public ResponseEntity&lt;Map&lt;String, String&gt;&gt; delete(&#10;            @Parameter(description = &quot;Author name&quot;, example = &quot;student&quot;, required = true) &#10;            @PathVariable String author,&#10;            @Parameter(description = &quot;Blueprint name&quot;, example = &quot;Casa de campo&quot;, required = true) &#10;            @PathVariable String name) {&#10;&#10;        String key = author + &quot;_&quot; + name.replace(&quot; &quot;, &quot;&quot;);&#10;        Map&lt;String, String&gt; removed = blueprintStorage.remove(key);&#10;&#10;        if (removed == null) {&#10;            return ResponseEntity.notFound().build();&#10;        }&#10;&#10;        return ResponseEntity.ok(Map.of(&quot;message&quot;, &quot;Blueprint deleted successfully&quot;));&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/src/main/java/co/edu/eci/blueprints/auth/AuthController.java">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/src/main/java/co/edu/eci/blueprints/auth/AuthController.java" />
              <option name="originalContent" value="package co.edu.eci.blueprints.auth;&#10;&#10;import co.edu.eci.blueprints.security.InMemoryUserService;&#10;import co.edu.eci.blueprints.security.RsaKeyProperties;&#10;import org.springframework.http.ResponseEntity;&#10;import org.springframework.security.oauth2.jwt.*;&#10;import org.springframework.web.bind.annotation.*;&#10;&#10;import java.time.Instant;&#10;import java.util.Map;&#10;&#10;@RestController&#10;@RequestMapping(&quot;/auth&quot;)&#10;public class AuthController {&#10;&#10;    private final JwtEncoder encoder;&#10;    private final InMemoryUserService userService;&#10;    private final RsaKeyProperties props;&#10;&#10;    public AuthController(JwtEncoder encoder, InMemoryUserService userService, RsaKeyProperties props) {&#10;        this.encoder = encoder;&#10;        this.userService = userService;&#10;        this.props = props;&#10;    }&#10;&#10;    public record LoginRequest(String username, String password) {}&#10;    public record TokenResponse(String access_token, String token_type, long expires_in) {}&#10;&#10;    @PostMapping(&quot;/login&quot;)&#10;    public ResponseEntity&lt;?&gt; login(@RequestBody LoginRequest req) {&#10;        if (!userService.isValid(req.username(), req.password())) {&#10;            return ResponseEntity.status(401).body(Map.of(&quot;error&quot;, &quot;invalid_credentials&quot;));&#10;        }&#10;&#10;        Instant now = Instant.now();&#10;        long ttl = props.tokenTtlSeconds() != null ? props.tokenTtlSeconds() : 900;&#10;        Instant exp = now.plusSeconds(ttl);&#10;&#10;        String scope = &quot;blueprints.read blueprints.write&quot;;&#10;&#10;        JwtClaimsSet claims = JwtClaimsSet.builder()&#10;                .issuer(props.issuer())&#10;                .issuedAt(now)&#10;                .expiresAt(exp)&#10;                .subject(req.username())&#10;                .claim(&quot;scope&quot;, scope)&#10;                .build();&#10;&#10;        JwsHeader jws = JwsHeader.with(() -&gt; &quot;RS256&quot;).build();&#10;        String token = this.encoder.encode(JwtEncoderParameters.from(jws, claims)).getTokenValue();&#10;&#10;        return ResponseEntity.ok(new TokenResponse(token, &quot;Bearer&quot;, ttl));&#10;    }&#10;}&#10;" />
              <option name="updatedContent" value="package co.edu.eci.blueprints.auth;&#10;&#10;import co.edu.eci.blueprints.security.InMemoryUserService;&#10;import co.edu.eci.blueprints.security.RsaKeyProperties;&#10;import io.swagger.v3.oas.annotations.Operation;&#10;import io.swagger.v3.oas.annotations.media.Content;&#10;import io.swagger.v3.oas.annotations.media.Schema;&#10;import io.swagger.v3.oas.annotations.responses.ApiResponse;&#10;import io.swagger.v3.oas.annotations.responses.ApiResponses;&#10;import io.swagger.v3.oas.annotations.tags.Tag;&#10;import org.springframework.http.ResponseEntity;&#10;import org.springframework.security.oauth2.jwt.*;&#10;import org.springframework.web.bind.annotation.*;&#10;&#10;import java.time.Instant;&#10;import java.util.Map;&#10;&#10;@RestController&#10;@RequestMapping(&quot;/auth&quot;)&#10;@Tag(name = &quot;Authentication&quot;, description = &quot;Endpoints for user authentication and JWT token management&quot;)&#10;public class AuthController {&#10;&#10;    private final JwtEncoder encoder;&#10;    private final InMemoryUserService userService;&#10;    private final RsaKeyProperties props;&#10;&#10;    public AuthController(JwtEncoder encoder, InMemoryUserService userService, RsaKeyProperties props) {&#10;        this.encoder = encoder;&#10;        this.userService = userService;&#10;        this.props = props;&#10;    }&#10;&#10;    @Schema(description = &quot;Login request with username and password&quot;)&#10;    public record LoginRequest(&#10;        @Schema(description = &quot;Username&quot;, example = &quot;student&quot;, required = true)&#10;        String username, &#10;        @Schema(description = &quot;Password&quot;, example = &quot;student123&quot;, required = true)&#10;        String password&#10;    ) {}&#10;    &#10;    @Schema(description = &quot;JWT token response&quot;)&#10;    public record TokenResponse(&#10;        @Schema(description = &quot;JWT access token&quot;, example = &quot;eyJhbGciOiJSUzI1NiIs...&quot;)&#10;        String access_token, &#10;        @Schema(description = &quot;Token type&quot;, example = &quot;Bearer&quot;)&#10;        String token_type, &#10;        @Schema(description = &quot;Token expiration time in seconds&quot;, example = &quot;900&quot;)&#10;        long expires_in&#10;    ) {}&#10;&#10;    @Operation(&#10;        summary = &quot;User Login&quot;,&#10;        description = &quot;Authenticates a user with username/password and returns a JWT access token. &quot; +&#10;                     &quot;Available users: 'student'/'student123', 'assistant'/'assistant123'&quot;&#10;    )&#10;    @ApiResponses({&#10;        @ApiResponse(&#10;            responseCode = &quot;200&quot;, &#10;            description = &quot;Authentication successful&quot;,&#10;            content = @Content(&#10;                mediaType = &quot;application/json&quot;,&#10;                schema = @Schema(implementation = TokenResponse.class)&#10;            )&#10;        ),&#10;        @ApiResponse(&#10;            responseCode = &quot;401&quot;,&#10;            description = &quot;Invalid credentials&quot;,&#10;            content = @Content(&#10;                mediaType = &quot;application/json&quot;,&#10;                schema = @Schema(example = &quot;{\&quot;error\&quot;: \&quot;invalid_credentials\&quot;}&quot;)&#10;            )&#10;        )&#10;    })&#10;    @PostMapping(&quot;/login&quot;)&#10;    public ResponseEntity&lt;?&gt; login(&#10;        @io.swagger.v3.oas.annotations.parameters.RequestBody(&#10;            description = &quot;User credentials&quot;,&#10;            required = true,&#10;            content = @Content(schema = @Schema(implementation = LoginRequest.class))&#10;        )&#10;        @RequestBody LoginRequest req) {&#10;        &#10;        if (!userService.isValid(req.username(), req.password())) {&#10;            return ResponseEntity.status(401).body(Map.of(&quot;error&quot;, &quot;invalid_credentials&quot;));&#10;        }&#10;&#10;        Instant now = Instant.now();&#10;        long ttl = props.tokenTtlSeconds() != null ? props.tokenTtlSeconds() : 900;&#10;        Instant exp = now.plusSeconds(ttl);&#10;&#10;        String scope = &quot;blueprints.read blueprints.write&quot;;&#10;&#10;        JwtClaimsSet claims = JwtClaimsSet.builder()&#10;                .issuer(props.issuer())&#10;                .issuedAt(now)&#10;                .expiresAt(exp)&#10;                .subject(req.username())&#10;                .claim(&quot;scope&quot;, scope)&#10;                .build();&#10;&#10;        JwsHeader jws = JwsHeader.with(() -&gt; &quot;RS256&quot;).build();&#10;        String token = this.encoder.encode(JwtEncoderParameters.from(jws, claims)).getTokenValue();&#10;&#10;        return ResponseEntity.ok(new TokenResponse(token, &quot;Bearer&quot;, ttl));&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/src/main/java/co/edu/eci/blueprints/config/OpenApiConfig.java">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/src/main/java/co/edu/eci/blueprints/config/OpenApiConfig.java" />
              <option name="originalContent" value="package co.edu.eci.blueprints.config;&#10;&#10;import io.swagger.v3.oas.models.OpenAPI;&#10;import io.swagger.v3.oas.models.info.Info;&#10;import io.swagger.v3.oas.models.security.SecurityRequirement;&#10;import io.swagger.v3.oas.models.security.SecurityScheme;&#10;import io.swagger.v3.oas.models.Components;&#10;import org.springframework.context.annotation.Bean;&#10;import org.springframework.context.annotation.Configuration;&#10;&#10;@Configuration&#10;public class OpenApiConfig {&#10;    @Bean&#10;    public OpenAPI api() {&#10;        return new OpenAPI()&#10;          .info(new Info().title(&quot;BluePrints API&quot;)&#10;            .version(&quot;2.0&quot;)&#10;            .description(&quot;Parte 2 — Seguridad con JWT (OAuth 2.0)&quot;))&#10;          .addSecurityItem(new SecurityRequirement().addList(&quot;bearer-jwt&quot;))&#10;          .components(new Components().addSecuritySchemes(&quot;bearer-jwt&quot;,&#10;            new SecurityScheme()&#10;              .name(&quot;bearer-jwt&quot;)&#10;              .type(SecurityScheme.Type.HTTP)&#10;              .scheme(&quot;bearer&quot;)&#10;              .bearerFormat(&quot;JWT&quot;)));&#10;    }&#10;}&#10;" />
              <option name="updatedContent" value="package co.edu.eci.blueprints.config;&#10;&#10;import io.swagger.v3.oas.models.OpenAPI;&#10;import io.swagger.v3.oas.models.info.Contact;&#10;import io.swagger.v3.oas.models.info.Info;&#10;import io.swagger.v3.oas.models.info.License;&#10;import io.swagger.v3.oas.models.security.SecurityRequirement;&#10;import io.swagger.v3.oas.models.security.SecurityScheme;&#10;import io.swagger.v3.oas.models.Components;&#10;import io.swagger.v3.oas.models.servers.Server;&#10;import org.springframework.context.annotation.Bean;&#10;import org.springframework.context.annotation.Configuration;&#10;&#10;import java.util.List;&#10;&#10;@Configuration&#10;public class OpenApiConfig {&#10;    @Bean&#10;    public OpenAPI api() {&#10;        return new OpenAPI()&#10;          .info(new Info()&#10;            .title(&quot;BluePrints API&quot;)&#10;            .version(&quot;2.0&quot;)&#10;            .description(&quot;Parte 2 — Seguridad con JWT (OAuth 2.0)\n\n&quot; +&#10;                        &quot;Esta API implementa autenticación JWT con OAuth2 Resource Server. &quot; +&#10;                        &quot;Para usar los endpoints protegidos:\n\n&quot; +&#10;                        &quot;1. Primero haz login en /auth/login con:\n&quot; +&#10;                        &quot;   - Username: student, Password: student123\n&quot; +&#10;                        &quot;   - Username: assistant, Password: assistant123\n\n&quot; +&#10;                        &quot;2. Copia el access_token de la respuesta\n\n&quot; +&#10;                        &quot;3. Haz clic en 'Authorize' y pega el token (sin 'Bearer ')\n\n&quot; +&#10;                        &quot;Los endpoints /api/* requieren scopes específicos:\n&quot; +&#10;                        &quot;- blueprints.read: para operaciones de lectura (GET)\n&quot; +&#10;                        &quot;- blueprints.write: para operaciones de escritura (POST, PUT, DELETE)&quot;)&#10;            .contact(new Contact()&#10;                .name(&quot;Escuela Colombiana de Ingeniería&quot;)&#10;                .email(&quot;soporte@escuelaing.edu.co&quot;)&#10;                .url(&quot;https://www.escuelaing.edu.co&quot;))&#10;            .license(new License()&#10;                .name(&quot;Proyecto Educativo&quot;)&#10;                .url(&quot;https://github.com/DECSIS-ECI/&quot;)))&#10;          .servers(List.of(&#10;              new Server()&#10;                  .url(&quot;http://localhost:8080&quot;)&#10;                  .description(&quot;Servidor de desarrollo local&quot;)))&#10;          .addSecurityItem(new SecurityRequirement().addList(&quot;bearer-jwt&quot;))&#10;          .components(new Components().addSecuritySchemes(&quot;bearer-jwt&quot;,&#10;            new SecurityScheme()&#10;              .name(&quot;bearer-jwt&quot;)&#10;              .type(SecurityScheme.Type.HTTP)&#10;              .scheme(&quot;bearer&quot;)&#10;              .bearerFormat(&quot;JWT&quot;)&#10;              .description(&quot;JWT Authorization header using the Bearer scheme. &quot; +&#10;                          &quot;Example: \&quot;Authorization: Bearer {token}\&quot;. &quot; +&#10;                          &quot;Obtén tu token usando el endpoint /auth/login.&quot;)));&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/src/main/resources/application.yml">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/src/main/resources/application.yml" />
              <option name="originalContent" value="server:&#10;  port: 8080&#10;&#10;spring:&#10;  security:&#10;    oauth2:&#10;      resourceserver:&#10;        jwt:&#10;          jwk-set-uri: https://auth.example.com/.well-known/jwks.json&#10;  main:&#10;    allow-bean-definition-overriding: true&#10;&#10;blueprints:&#10;  security:&#10;    issuer: &quot;https://decsis-eci/blueprints&quot;&#10;    token-ttl-seconds: 900&#10;" />
              <option name="updatedContent" value="server:&#10;  port: 8080&#10;&#10;spring:&#10;  main:&#10;    allow-bean-definition-overriding: true&#10;&#10;blueprints:&#10;  security:&#10;    issuer: &quot;https://decsis-eci/blueprints&quot;&#10;    token-ttl-seconds: 900" />
            </PendingDiffInfo>
          </value>
        </entry>
      </map>
    </option>
  </component>
</project>